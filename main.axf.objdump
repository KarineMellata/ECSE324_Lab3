
//campus.mcgill.ca/emf/CPE/kmella/Desktop/G29_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 84 09 00 00 88 09 00 00 8c 09 00 00     @...............
  30:	90 09 00 00 80 09 00 00 94 09 00 00 98 09 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000210 	bl	91c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000a80 	.word	0x00000a80

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000eb8 	.word	0x00000eb8

00000124 <__cs3_heap_start_ptr>:
 124:	00000ee0 	.word	0x00000ee0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000ec0 	.word	0x00000ec0
 170:	00000ec3 	.word	0x00000ec3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000ec0 	.word	0x00000ec0
 1bc:	00000ec0 	.word	0x00000ec0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000ec0 	.word	0x00000ec0
 200:	00000000 	.word	0x00000000
 204:	00000a24 	.word	0x00000a24

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000a24 	.word	0x00000a24
 250:	00000ec4 	.word	0x00000ec4
 254:	00000a80 	.word	0x00000a80
 258:	00000000 	.word	0x00000000

0000025c <main>:
#include <stdio.h>
#include "./drivers/inc/LEDs.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"

int main() {
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
	HEX_flood_ASM(HEX4 | HEX5);
 264:	e3a00030 	mov	r0, #48	; 0x30
 268:	eb000037 	bl	34c <HEX_flood_ASM>
	HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3);
 26c:	e3a0000f 	mov	r0, #15
 270:	eb000051 	bl	3bc <HEX_clear_ASM>
 274:	ea000000 	b	27c <main+0x20>
		else if(read_PB_data_ASM() == 8) {
			HEX_write_ASM(HEX3, read_slider_switches_ASM());
		}
		

	}
 278:	e1a00000 	nop			; (mov r0, r0)
int main() {
	HEX_flood_ASM(HEX4 | HEX5);
	HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3);
//	HEX_write_ASM(HEX4, 5);
	while(1) {
		if(read_slider_switches_ASM() >= 512) {
 27c:	eb0000c8 	bl	5a4 <read_slider_switches_ASM>
 280:	e1a02000 	mov	r2, r0
 284:	e30031ff 	movw	r3, #511	; 0x1ff
 288:	e1520003 	cmp	r2, r3
 28c:	da000002 	ble	29c <main+0x40>
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3);
 290:	e3a0000f 	mov	r0, #15
 294:	eb000048 	bl	3bc <HEX_clear_ASM>
		else if(read_PB_data_ASM() == 8) {
			HEX_write_ASM(HEX3, read_slider_switches_ASM());
		}
		

	}
 298:	eafffff6 	b	278 <main+0x1c>
//	HEX_write_ASM(HEX4, 5);
	while(1) {
		if(read_slider_switches_ASM() >= 512) {
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3);
		}
		else if(read_PB_data_ASM() == 1) {
 29c:	eb0000cb 	bl	5d0 <read_PB_data_ASM>
 2a0:	e1a03000 	mov	r3, r0
 2a4:	e3530001 	cmp	r3, #1
 2a8:	1a000006 	bne	2c8 <main+0x6c>
			HEX_write_ASM(HEX0, read_slider_switches_ASM());
 2ac:	eb0000bc 	bl	5a4 <read_slider_switches_ASM>
 2b0:	e1a03000 	mov	r3, r0
 2b4:	e6ef3073 	uxtb	r3, r3
 2b8:	e3a00001 	mov	r0, #1
 2bc:	e1a01003 	mov	r1, r3
 2c0:	eb000059 	bl	42c <HEX_write_ASM>
		else if(read_PB_data_ASM() == 8) {
			HEX_write_ASM(HEX3, read_slider_switches_ASM());
		}
		

	}
 2c4:	eaffffeb 	b	278 <main+0x1c>
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3);
		}
		else if(read_PB_data_ASM() == 1) {
			HEX_write_ASM(HEX0, read_slider_switches_ASM());
		}
		else if(read_PB_data_ASM() == 2) {
 2c8:	eb0000c0 	bl	5d0 <read_PB_data_ASM>
 2cc:	e1a03000 	mov	r3, r0
 2d0:	e3530002 	cmp	r3, #2
 2d4:	1a000006 	bne	2f4 <main+0x98>
			HEX_write_ASM(HEX1, read_slider_switches_ASM());
 2d8:	eb0000b1 	bl	5a4 <read_slider_switches_ASM>
 2dc:	e1a03000 	mov	r3, r0
 2e0:	e6ef3073 	uxtb	r3, r3
 2e4:	e3a00002 	mov	r0, #2
 2e8:	e1a01003 	mov	r1, r3
 2ec:	eb00004e 	bl	42c <HEX_write_ASM>
		else if(read_PB_data_ASM() == 8) {
			HEX_write_ASM(HEX3, read_slider_switches_ASM());
		}
		

	}
 2f0:	eaffffe0 	b	278 <main+0x1c>
			HEX_write_ASM(HEX0, read_slider_switches_ASM());
		}
		else if(read_PB_data_ASM() == 2) {
			HEX_write_ASM(HEX1, read_slider_switches_ASM());
		}
		else if(read_PB_data_ASM() == 4) {
 2f4:	eb0000b5 	bl	5d0 <read_PB_data_ASM>
 2f8:	e1a03000 	mov	r3, r0
 2fc:	e3530004 	cmp	r3, #4
 300:	1a000006 	bne	320 <main+0xc4>
			HEX_write_ASM(HEX2, read_slider_switches_ASM());
 304:	eb0000a6 	bl	5a4 <read_slider_switches_ASM>
 308:	e1a03000 	mov	r3, r0
 30c:	e6ef3073 	uxtb	r3, r3
 310:	e3a00004 	mov	r0, #4
 314:	e1a01003 	mov	r1, r3
 318:	eb000043 	bl	42c <HEX_write_ASM>
		else if(read_PB_data_ASM() == 8) {
			HEX_write_ASM(HEX3, read_slider_switches_ASM());
		}
		

	}
 31c:	eaffffd5 	b	278 <main+0x1c>
			HEX_write_ASM(HEX1, read_slider_switches_ASM());
		}
		else if(read_PB_data_ASM() == 4) {
			HEX_write_ASM(HEX2, read_slider_switches_ASM());
		}
		else if(read_PB_data_ASM() == 8) {
 320:	eb0000aa 	bl	5d0 <read_PB_data_ASM>
 324:	e1a03000 	mov	r3, r0
 328:	e3530008 	cmp	r3, #8
 32c:	1affffd1 	bne	278 <main+0x1c>
			HEX_write_ASM(HEX3, read_slider_switches_ASM());
 330:	eb00009b 	bl	5a4 <read_slider_switches_ASM>
 334:	e1a03000 	mov	r3, r0
 338:	e6ef3073 	uxtb	r3, r3
 33c:	e3a00008 	mov	r0, #8
 340:	e1a01003 	mov	r1, r3
 344:	eb000038 	bl	42c <HEX_write_ASM>
		}
		

	}
 348:	eaffffca 	b	278 <main+0x1c>

0000034c <HEX_flood_ASM>:
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_flood_ASM:
	MOV R1, #0
 34c:	e3a01000 	mov	r1, #0
	LDR R2, =BASELINE
 350:	e3a02001 	mov	r2, #1
	LDR R3, =N
 354:	e3a03006 	mov	r3, #6
	LDR R6, =BASE_7SEG1
 358:	e59f623c 	ldr	r6, [pc, #572]	; 59c <write2+0x10>
	LDR R7, =BASE_7SEG2
 35c:	e59f723c 	ldr	r7, [pc, #572]	; 5a0 <write2+0x14>

00000360 <HEX_flood_loop>:

HEX_flood_loop:
	CMP R1, #4
 360:	e3510004 	cmp	r1, #4
	BGE set_zero2
 364:	aa000008 	bge	38c <set_zero2>
	TST R0, R2
 368:	e1100002 	tst	r0, r2
	BNE flood
 36c:	1a000002 	bne	37c <flood>

00000370 <mult3>:

mult3:
	LSL R2, R2, #1
 370:	e1a02082 	lsl	r2, r2, #1
	ADD R1, R1, #1
 374:	e2811001 	add	r1, r1, #1
	B HEX_flood_loop
 378:	eafffff8 	b	360 <HEX_flood_loop>

0000037c <flood>:

flood:
	ADD R4, R1, R6
 37c:	e0814006 	add	r4, r1, r6
	MOV R5, #255
 380:	e3a050ff 	mov	r5, #255	; 0xff
	STRB R5, [R4]
 384:	e5c45000 	strb	r5, [r4]
	B mult3
 388:	eafffff8 	b	370 <mult3>

0000038c <set_zero2>:

set_zero2:
	MOV R1, #0
 38c:	e3a01000 	mov	r1, #0

00000390 <HEX_flood_loop2>:

HEX_flood_loop2:
	CMP R1, #4
 390:	e3510004 	cmp	r1, #4
	BXGE LR
 394:	a12fff1e 	bxge	lr
	TST R0, R2
 398:	e1100002 	tst	r0, r2
	BNE flood2
 39c:	1a000002 	bne	3ac <flood2>

000003a0 <mult4>:

mult4:
	LSL R2, R2, #1
 3a0:	e1a02082 	lsl	r2, r2, #1
	ADD R1, R1, #1
 3a4:	e2811001 	add	r1, r1, #1
	B HEX_flood_loop2
 3a8:	eafffff8 	b	390 <HEX_flood_loop2>

000003ac <flood2>:

flood2:
	ADD R4, R1, R7
 3ac:	e0814007 	add	r4, r1, r7
	MOV R5, #255
 3b0:	e3a050ff 	mov	r5, #255	; 0xff
	STRB R5, [R4]
 3b4:	e5c45000 	strb	r5, [r4]
	B mult4
 3b8:	eafffff8 	b	3a0 <mult4>

000003bc <HEX_clear_ASM>:

//------------------------------------------
HEX_clear_ASM:
	MOV R1, #0
 3bc:	e3a01000 	mov	r1, #0
	LDR R2, =BASELINE
 3c0:	e3a02001 	mov	r2, #1
	LDR R3, =N
 3c4:	e3a03006 	mov	r3, #6
	LDR R6, =BASE_7SEG1
 3c8:	e59f61cc 	ldr	r6, [pc, #460]	; 59c <write2+0x10>
	LDR R7, =BASE_7SEG2
 3cc:	e59f71cc 	ldr	r7, [pc, #460]	; 5a0 <write2+0x14>

000003d0 <HEX_clear_loop>:

HEX_clear_loop: //this is for HEX0-HEX3
	CMP R1, #4
 3d0:	e3510004 	cmp	r1, #4
	BGE set_zero
 3d4:	aa000008 	bge	3fc <set_zero>
	TST R0, R2
 3d8:	e1100002 	tst	r0, r2
	BNE clear
 3dc:	1a000002 	bne	3ec <clear>

000003e0 <mult>:

mult:
	LSL R2, R2, #1
 3e0:	e1a02082 	lsl	r2, r2, #1
	ADD R1, R1, #1
 3e4:	e2811001 	add	r1, r1, #1
	B HEX_clear_loop
 3e8:	eafffff8 	b	3d0 <HEX_clear_loop>

000003ec <clear>:

clear:
	ADD R4, R1, R6
 3ec:	e0814006 	add	r4, r1, r6
	MOV R5, #0
 3f0:	e3a05000 	mov	r5, #0
	STRB R5, [R4]
 3f4:	e5c45000 	strb	r5, [r4]
	B mult
 3f8:	eafffff8 	b	3e0 <mult>

000003fc <set_zero>:

set_zero:
	MOV R1, #0
 3fc:	e3a01000 	mov	r1, #0

00000400 <HEX_clear_loop2>:

HEX_clear_loop2: //this is for the HEX4-HEX5
	CMP R1, #2
 400:	e3510002 	cmp	r1, #2
	BXGE LR
 404:	a12fff1e 	bxge	lr
	TST R0, R2
 408:	e1100002 	tst	r0, r2
	BNE clear2
 40c:	1a000002 	bne	41c <clear2>

00000410 <mult2>:

mult2:
	LSL R2, R2, #1
 410:	e1a02082 	lsl	r2, r2, #1
	ADD R1, R1, #1
 414:	e2811001 	add	r1, r1, #1
	B HEX_clear_loop2
 418:	eafffff8 	b	400 <HEX_clear_loop2>

0000041c <clear2>:

clear2:
	ADD R4, R1, R7
 41c:	e0814007 	add	r4, r1, r7
	MOV R5, #0
 420:	e3a05000 	mov	r5, #0
	STRB R5, [R4]
 424:	e5c45000 	strb	r5, [r4]
	B mult2
 428:	eafffff8 	b	410 <mult2>

0000042c <HEX_write_ASM>:
//------------------------------------------
HEX_write_ASM:
	CMP R1, #0
 42c:	e3510000 	cmp	r1, #0
	BNE TEST_1
 430:	1a000001 	bne	43c <TEST_1>
	MOV R1, #63
 434:	e3a0103f 	mov	r1, #63	; 0x3f
	B WRITE
 438:	ea00003b 	b	52c <WRITE>

0000043c <TEST_1>:

TEST_1:		
	CMP R1, #1
 43c:	e3510001 	cmp	r1, #1
	BNE TEST_2
 440:	1a000001 	bne	44c <TEST_2>
	MOV R1, #6
 444:	e3a01006 	mov	r1, #6
	B WRITE
 448:	ea000037 	b	52c <WRITE>

0000044c <TEST_2>:

TEST_2:		
	CMP R1, #2
 44c:	e3510002 	cmp	r1, #2
	BNE TEST_3
 450:	1a000001 	bne	45c <TEST_3>
	MOV R1, #91
 454:	e3a0105b 	mov	r1, #91	; 0x5b
	B WRITE
 458:	ea000033 	b	52c <WRITE>

0000045c <TEST_3>:

TEST_3:		
	CMP R1, #3
 45c:	e3510003 	cmp	r1, #3
	BNE TEST_4
 460:	1a000001 	bne	46c <TEST_4>
	MOV R1, #79
 464:	e3a0104f 	mov	r1, #79	; 0x4f
	B WRITE
 468:	ea00002f 	b	52c <WRITE>

0000046c <TEST_4>:

TEST_4:		
	CMP R1, #4
 46c:	e3510004 	cmp	r1, #4
	BNE TEST_5
 470:	1a000001 	bne	47c <TEST_5>
	MOV R1, #102
 474:	e3a01066 	mov	r1, #102	; 0x66
	B WRITE
 478:	ea00002b 	b	52c <WRITE>

0000047c <TEST_5>:

TEST_5:		
	CMP R1, #5
 47c:	e3510005 	cmp	r1, #5
	BNE TEST_6
 480:	1a000001 	bne	48c <TEST_6>
	MOV R1, #109
 484:	e3a0106d 	mov	r1, #109	; 0x6d
	B WRITE
 488:	ea000027 	b	52c <WRITE>

0000048c <TEST_6>:

TEST_6:		
	CMP R1, #6
 48c:	e3510006 	cmp	r1, #6
	BNE TEST_7
 490:	1a000001 	bne	49c <TEST_7>
	MOV R1, #125
 494:	e3a0107d 	mov	r1, #125	; 0x7d
	B WRITE
 498:	ea000023 	b	52c <WRITE>

0000049c <TEST_7>:

TEST_7:		
	CMP R1, #7
 49c:	e3510007 	cmp	r1, #7
	BNE TEST_8
 4a0:	1a000001 	bne	4ac <TEST_8>
	MOV R1, #39
 4a4:	e3a01027 	mov	r1, #39	; 0x27
	B WRITE
 4a8:	ea00001f 	b	52c <WRITE>

000004ac <TEST_8>:

TEST_8:		
	CMP R1, #8
 4ac:	e3510008 	cmp	r1, #8
	BNE TEST_9
 4b0:	1a000001 	bne	4bc <TEST_9>
	MOV R1, #127
 4b4:	e3a0107f 	mov	r1, #127	; 0x7f
	B WRITE
 4b8:	ea00001b 	b	52c <WRITE>

000004bc <TEST_9>:

TEST_9:		
	CMP R1, #9
 4bc:	e3510009 	cmp	r1, #9
	BNE TEST_A
 4c0:	1a000001 	bne	4cc <TEST_A>
	MOV R1, #111
 4c4:	e3a0106f 	mov	r1, #111	; 0x6f
	B WRITE
 4c8:	ea000017 	b	52c <WRITE>

000004cc <TEST_A>:

TEST_A:		
	CMP R1, #10
 4cc:	e351000a 	cmp	r1, #10
	BNE TEST_B
 4d0:	1a000001 	bne	4dc <TEST_B>
	MOV R1, #119
 4d4:	e3a01077 	mov	r1, #119	; 0x77
	B WRITE
 4d8:	ea000013 	b	52c <WRITE>

000004dc <TEST_B>:

TEST_B:		
	CMP R1, #11
 4dc:	e351000b 	cmp	r1, #11
	BNE TEST_C
 4e0:	1a000001 	bne	4ec <TEST_C>
	MOV R1, #124
 4e4:	e3a0107c 	mov	r1, #124	; 0x7c
	B WRITE
 4e8:	ea00000f 	b	52c <WRITE>

000004ec <TEST_C>:

TEST_C:		
	CMP R1, #12
 4ec:	e351000c 	cmp	r1, #12
	BNE TEST_D
 4f0:	1a000001 	bne	4fc <TEST_D>
	MOV R1, #57
 4f4:	e3a01039 	mov	r1, #57	; 0x39
	B WRITE
 4f8:	ea00000b 	b	52c <WRITE>

000004fc <TEST_D>:

TEST_D:		
	CMP R1, #13
 4fc:	e351000d 	cmp	r1, #13
	BNE TEST_E
 500:	1a000001 	bne	50c <TEST_E>
	MOV R1, #94
 504:	e3a0105e 	mov	r1, #94	; 0x5e
	B WRITE
 508:	ea000007 	b	52c <WRITE>

0000050c <TEST_E>:

TEST_E:		
	CMP R1, #14
 50c:	e351000e 	cmp	r1, #14
	BNE TEST_F
 510:	1a000001 	bne	51c <TEST_F>
	MOV R1, #121
 514:	e3a01079 	mov	r1, #121	; 0x79
	B WRITE
 518:	ea000003 	b	52c <WRITE>

0000051c <TEST_F>:

TEST_F:		
	CMP R1, #15
 51c:	e351000f 	cmp	r1, #15
	BXNE LR
 520:	112fff1e 	bxne	lr
	MOV R1, #113
 524:	e3a01071 	mov	r1, #113	; 0x71
	B WRITE
 528:	eaffffff 	b	52c <WRITE>

0000052c <WRITE>:

WRITE:		
	MOV R11, #0
 52c:	e3a0b000 	mov	r11, #0
	LDR R2, =BASELINE
 530:	e3a02001 	mov	r2, #1
	LDR R3, =N
 534:	e3a03006 	mov	r3, #6
	LDR R6, =BASE_7SEG1
 538:	e59f605c 	ldr	r6, [pc, #92]	; 59c <write2+0x10>
	LDR R7, =BASE_7SEG2
 53c:	e59f705c 	ldr	r7, [pc, #92]	; 5a0 <write2+0x14>

00000540 <HEX_write_loop>:

HEX_write_loop: 
	CMP R11, #4
 540:	e35b0004 	cmp	r11, #4
	BGE set_zero3
 544:	aa000008 	bge	56c <set_zero3>
	TST R0, R2
 548:	e1100002 	tst	r0, r2
	BNE write
 54c:	1a000002 	bne	55c <write>

00000550 <mult5>:

mult5:	
	LSL R2, R2, #1
 550:	e1a02082 	lsl	r2, r2, #1
	ADD R11, R11, #1
 554:	e28bb001 	add	r11, r11, #1
	B HEX_write_loop
 558:	eafffff8 	b	540 <HEX_write_loop>

0000055c <write>:

write:		
	ADD R4, R11, R6
 55c:	e08b4006 	add	r4, r11, r6
	MOV R5, R1
 560:	e1a05001 	mov	r5, r1
	STRB R5, [R4]
 564:	e5c45000 	strb	r5, [r4]
	B mult5
 568:	eafffff8 	b	550 <mult5>

0000056c <set_zero3>:

set_zero3:	
	MOV R11, #0
 56c:	e3a0b000 	mov	r11, #0

00000570 <HEX_write_loop2>:

HEX_write_loop2:
	CMP R11, #2
 570:	e35b0002 	cmp	r11, #2
	BXGE LR
 574:	a12fff1e 	bxge	lr
	TST R0, R2
 578:	e1100002 	tst	r0, r2
	BNE write2
 57c:	1a000002 	bne	58c <write2>

00000580 <mult6>:

mult6:	
	LSL R2, R2, #1
 580:	e1a02082 	lsl	r2, r2, #1
	ADD R11, R11, #1
 584:	e28bb001 	add	r11, r11, #1
	B HEX_write_loop2
 588:	eafffff8 	b	570 <HEX_write_loop2>

0000058c <write2>:

write2:		
	ADD R4, R11, R7
 58c:	e08b4007 	add	r4, r11, r7
	MOV R5, R1
 590:	e1a05001 	mov	r5, r1
	STRB R5, [R4]
 594:	e5c45000 	strb	r5, [r4]
	B mult6 
 598:	eafffff8 	b	580 <mult6>

HEX_flood_ASM:
	MOV R1, #0
	LDR R2, =BASELINE
	LDR R3, =N
	LDR R6, =BASE_7SEG1
 59c:	ff200020 	.word	0xff200020
	LDR R7, =BASE_7SEG2
 5a0:	ff200030 	.word	0xff200030

000005a4 <read_slider_switches_ASM>:
		.text
		.equ SW_BASE, 0xFF200040
		.global read_slider_switches_ASM

read_slider_switches_ASM:
							LDR R1, =SW_BASE
 5a4:	e59f1004 	ldr	r1, [pc, #4]	; 5b0 <read_slider_switches_ASM+0xc>
							LDR R0, [R1]
 5a8:	e5910000 	ldr	r0, [r1]
							BX LR
 5ac:	e12fff1e 	bx	lr
		.text
		.equ SW_BASE, 0xFF200040
		.global read_slider_switches_ASM

read_slider_switches_ASM:
							LDR R1, =SW_BASE
 5b0:	ff200040 	.word	0xff200040

000005b4 <read_LEDs_ASM>:
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, =LED_BASE
 5b4:	e59f1010 	ldr	r1, [pc, #16]	; 5cc <write_LEDs_ASM+0xc>
	LDR R0, [R1]
 5b8:	e5910000 	ldr	r0, [r1]
	BX LR
 5bc:	e12fff1e 	bx	lr

000005c0 <write_LEDs_ASM>:

write_LEDs_ASM:
	LDR R1, =LED_BASE
 5c0:	e59f1004 	ldr	r1, [pc, #4]	; 5cc <write_LEDs_ASM+0xc>
	STR R0, [R1]
 5c4:	e5810000 	str	r0, [r1]
	BX LR
 5c8:	e12fff1e 	bx	lr
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, =LED_BASE
 5cc:	ff200000 	.word	0xff200000

000005d0 <read_PB_data_ASM>:

	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	LDR R1, =BT_BASE
 5d0:	e59f1010 	ldr	r1, [pc, #16]	; 5e8 <PB_clear_edgecap_ASM>
	LDR R0, [R1]
 5d4:	e5910000 	ldr	r0, [r1]
	BX LR
 5d8:	e12fff1e 	bx	lr

000005dc <PB_data_is_pressed_ASM>:
PB_data_is_pressed_ASM:
	
//

read_PB_edgecap_ASM:
	LDR R1, =EDGE_CAP
 5dc:	e59f1008 	ldr	r1, [pc, #8]	; 5ec <PB_clear_edgecap_ASM+0x4>
	LDR R0, [R1]
 5e0:	e5910000 	ldr	r0, [r1]
	BX LR
 5e4:	e12fff1e 	bx	lr

000005e8 <PB_clear_edgecap_ASM>:

	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	LDR R1, =BT_BASE
 5e8:	ff200050 	.word	0xff200050
PB_data_is_pressed_ASM:
	
//

read_PB_edgecap_ASM:
	LDR R1, =EDGE_CAP
 5ec:	ff20005c 	.word	0xff20005c

000005f0 <atexit>:
 5f0:	e1a01000 	mov	r1, r0
 5f4:	e3a00000 	mov	r0, #0
 5f8:	e92d4008 	push	{r3, lr}
 5fc:	e1a02000 	mov	r2, r0
 600:	e1a03000 	mov	r3, r0
 604:	eb00000e 	bl	644 <__register_exitproc>
 608:	e8bd4008 	pop	{r3, lr}
 60c:	e12fff1e 	bx	lr

00000610 <exit>:
 610:	e92d4008 	push	{r3, lr}
 614:	e3a01000 	mov	r1, #0
 618:	e1a04000 	mov	r4, r0
 61c:	eb000045 	bl	738 <__call_exitprocs>
 620:	e59f3018 	ldr	r3, [pc, #24]	; 640 <exit+0x30>
 624:	e5930000 	ldr	r0, [r3]
 628:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 62c:	e3530000 	cmp	r3, #0
 630:	11a0e00f 	movne	lr, pc
 634:	112fff13 	bxne	r3
 638:	e1a00004 	mov	r0, r4
 63c:	eb0000c9 	bl	968 <_exit>
 640:	00000a28 	.word	0x00000a28

00000644 <__register_exitproc>:
 644:	e59fc0e4 	ldr	r12, [pc, #228]	; 730 <__register_exitproc+0xec>
 648:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 64c:	e59c4000 	ldr	r4, [r12]
 650:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 654:	e35c0000 	cmp	r12, #0
 658:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 65c:	e59c5004 	ldr	r5, [r12, #4]
 660:	0584c148 	streq	r12, [r4, #328]	; 0x148
 664:	e355001f 	cmp	r5, #31
 668:	e24dd010 	sub	sp, sp, #16
 66c:	e1a06000 	mov	r6, r0
 670:	da000015 	ble	6cc <__register_exitproc+0x88>
 674:	e59f00b8 	ldr	r0, [pc, #184]	; 734 <__register_exitproc+0xf0>
 678:	e3500000 	cmp	r0, #0
 67c:	1a000001 	bne	688 <__register_exitproc+0x44>
 680:	e3e00000 	mvn	r0, #0
 684:	ea000018 	b	6ec <__register_exitproc+0xa8>
 688:	e3a00e19 	mov	r0, #400	; 0x190
 68c:	e58d100c 	str	r1, [sp, #12]
 690:	e58d2008 	str	r2, [sp, #8]
 694:	e58d3004 	str	r3, [sp, #4]
 698:	e320f000 	nop	{0}
 69c:	e250c000 	subs	r12, r0, #0
 6a0:	e59d100c 	ldr	r1, [sp, #12]
 6a4:	e59d2008 	ldr	r2, [sp, #8]
 6a8:	e59d3004 	ldr	r3, [sp, #4]
 6ac:	0afffff3 	beq	680 <__register_exitproc+0x3c>
 6b0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 6b4:	e3a00000 	mov	r0, #0
 6b8:	e58c0004 	str	r0, [r12, #4]
 6bc:	e58c5000 	str	r5, [r12]
 6c0:	e584c148 	str	r12, [r4, #328]	; 0x148
 6c4:	e58c0188 	str	r0, [r12, #392]	; 0x188
 6c8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 6cc:	e3560000 	cmp	r6, #0
 6d0:	e59c4004 	ldr	r4, [r12, #4]
 6d4:	1a000007 	bne	6f8 <__register_exitproc+0xb4>
 6d8:	e2843002 	add	r3, r4, #2
 6dc:	e2844001 	add	r4, r4, #1
 6e0:	e78c1103 	str	r1, [r12, r3, lsl #2]
 6e4:	e58c4004 	str	r4, [r12, #4]
 6e8:	e3a00000 	mov	r0, #0
 6ec:	e28dd010 	add	sp, sp, #16
 6f0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 6f4:	e12fff1e 	bx	lr
 6f8:	e3a00001 	mov	r0, #1
 6fc:	e1a00410 	lsl	r0, r0, r4
 700:	e08c8104 	add	r8, r12, r4, lsl #2
 704:	e3560002 	cmp	r6, #2
 708:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 70c:	e5883108 	str	r3, [r8, #264]	; 0x108
 710:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 714:	e1877000 	orr	r7, r7, r0
 718:	01830000 	orreq	r0, r3, r0
 71c:	e1a05008 	mov	r5, r8
 720:	e5882088 	str	r2, [r8, #136]	; 0x88
 724:	e58c7188 	str	r7, [r12, #392]	; 0x188
 728:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 72c:	eaffffe9 	b	6d8 <__register_exitproc+0x94>
 730:	00000a28 	.word	0x00000a28
 734:	00000000 	.word	0x00000000

00000738 <__call_exitprocs>:
 738:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 73c:	e59f3168 	ldr	r3, [pc, #360]	; 8ac <__call_exitprocs+0x174>
 740:	e5933000 	ldr	r3, [r3]
 744:	e24dd014 	sub	sp, sp, #20
 748:	e58d3004 	str	r3, [sp, #4]
 74c:	e2833f52 	add	r3, r3, #328	; 0x148
 750:	e58d0008 	str	r0, [sp, #8]
 754:	e58d300c 	str	r3, [sp, #12]
 758:	e1a07001 	mov	r7, r1
 75c:	e3a08001 	mov	r8, #1
 760:	e59d3004 	ldr	r3, [sp, #4]
 764:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 768:	e3560000 	cmp	r6, #0
 76c:	e59db00c 	ldr	r11, [sp, #12]
 770:	0a000033 	beq	844 <__call_exitprocs+0x10c>
 774:	e5965004 	ldr	r5, [r6, #4]
 778:	e2554001 	subs	r4, r5, #1
 77c:	5286a088 	addpl	r10, r6, #136	; 0x88
 780:	5285501f 	addpl	r5, r5, #31
 784:	508a5105 	addpl	r5, r10, r5, lsl #2
 788:	5a000007 	bpl	7ac <__call_exitprocs+0x74>
 78c:	ea000029 	b	838 <__call_exitprocs+0x100>
 790:	e5953000 	ldr	r3, [r5]
 794:	e1530007 	cmp	r3, r7
 798:	0a000005 	beq	7b4 <__call_exitprocs+0x7c>
 79c:	e2444001 	sub	r4, r4, #1
 7a0:	e3740001 	cmn	r4, #1
 7a4:	e2455004 	sub	r5, r5, #4
 7a8:	0a000022 	beq	838 <__call_exitprocs+0x100>
 7ac:	e3570000 	cmp	r7, #0
 7b0:	1afffff6 	bne	790 <__call_exitprocs+0x58>
 7b4:	e5963004 	ldr	r3, [r6, #4]
 7b8:	e06a2005 	rsb	r2, r10, r5
 7bc:	e2433001 	sub	r3, r3, #1
 7c0:	e0862002 	add	r2, r6, r2
 7c4:	e1530004 	cmp	r3, r4
 7c8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 7cc:	13a01000 	movne	r1, #0
 7d0:	05864004 	streq	r4, [r6, #4]
 7d4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 7d8:	e3530000 	cmp	r3, #0
 7dc:	0affffee 	beq	79c <__call_exitprocs+0x64>
 7e0:	e1a02418 	lsl	r2, r8, r4
 7e4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 7e8:	e1120001 	tst	r2, r1
 7ec:	e5969004 	ldr	r9, [r6, #4]
 7f0:	0a000016 	beq	850 <__call_exitprocs+0x118>
 7f4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 7f8:	e1120001 	tst	r2, r1
 7fc:	1a000016 	bne	85c <__call_exitprocs+0x124>
 800:	e59d0008 	ldr	r0, [sp, #8]
 804:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 808:	e1a0e00f 	mov	lr, pc
 80c:	e12fff13 	bx	r3
 810:	e5963004 	ldr	r3, [r6, #4]
 814:	e1530009 	cmp	r3, r9
 818:	1affffd0 	bne	760 <__call_exitprocs+0x28>
 81c:	e59b3000 	ldr	r3, [r11]
 820:	e1530006 	cmp	r3, r6
 824:	1affffcd 	bne	760 <__call_exitprocs+0x28>
 828:	e2444001 	sub	r4, r4, #1
 82c:	e3740001 	cmn	r4, #1
 830:	e2455004 	sub	r5, r5, #4
 834:	1affffdc 	bne	7ac <__call_exitprocs+0x74>
 838:	e59f1070 	ldr	r1, [pc, #112]	; 8b0 <__call_exitprocs+0x178>
 83c:	e3510000 	cmp	r1, #0
 840:	1a000009 	bne	86c <__call_exitprocs+0x134>
 844:	e28dd014 	add	sp, sp, #20
 848:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 84c:	e12fff1e 	bx	lr
 850:	e1a0e00f 	mov	lr, pc
 854:	e12fff13 	bx	r3
 858:	eaffffec 	b	810 <__call_exitprocs+0xd8>
 85c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 860:	e1a0e00f 	mov	lr, pc
 864:	e12fff13 	bx	r3
 868:	eaffffe8 	b	810 <__call_exitprocs+0xd8>
 86c:	e5963004 	ldr	r3, [r6, #4]
 870:	e3530000 	cmp	r3, #0
 874:	e5963000 	ldr	r3, [r6]
 878:	1a000008 	bne	8a0 <__call_exitprocs+0x168>
 87c:	e3530000 	cmp	r3, #0
 880:	0a000006 	beq	8a0 <__call_exitprocs+0x168>
 884:	e1a00006 	mov	r0, r6
 888:	e58b3000 	str	r3, [r11]
 88c:	e320f000 	nop	{0}
 890:	e59b6000 	ldr	r6, [r11]
 894:	e3560000 	cmp	r6, #0
 898:	1affffb5 	bne	774 <__call_exitprocs+0x3c>
 89c:	eaffffe8 	b	844 <__call_exitprocs+0x10c>
 8a0:	e1a0b006 	mov	r11, r6
 8a4:	e1a06003 	mov	r6, r3
 8a8:	eafffff9 	b	894 <__call_exitprocs+0x15c>
 8ac:	00000a28 	.word	0x00000a28
 8b0:	00000000 	.word	0x00000000

000008b4 <register_fini>:
 8b4:	e92d4008 	push	{r3, lr}
 8b8:	e59f3010 	ldr	r3, [pc, #16]	; 8d0 <register_fini+0x1c>
 8bc:	e3530000 	cmp	r3, #0
 8c0:	159f000c 	ldrne	r0, [pc, #12]	; 8d4 <register_fini+0x20>
 8c4:	1bffff49 	blne	5f0 <atexit>
 8c8:	e8bd4008 	pop	{r3, lr}
 8cc:	e12fff1e 	bx	lr
 8d0:	00000a50 	.word	0x00000a50
 8d4:	000008d8 	.word	0x000008d8

000008d8 <__libc_fini_array>:
 8d8:	e92d4038 	push	{r3, r4, r5, lr}
 8dc:	e59f5030 	ldr	r5, [pc, #48]	; 914 <__libc_fini_array+0x3c>
 8e0:	e59f4030 	ldr	r4, [pc, #48]	; 918 <__libc_fini_array+0x40>
 8e4:	e0654004 	rsb	r4, r5, r4
 8e8:	e1b04144 	asrs	r4, r4, #2
 8ec:	10855104 	addne	r5, r5, r4, lsl #2
 8f0:	0a000004 	beq	908 <__libc_fini_array+0x30>
 8f4:	e5353004 	ldr	r3, [r5, #-4]!
 8f8:	e1a0e00f 	mov	lr, pc
 8fc:	e12fff13 	bx	r3
 900:	e2544001 	subs	r4, r4, #1
 904:	1afffffa 	bne	8f4 <__libc_fini_array+0x1c>
 908:	eb000050 	bl	a50 <__libc_fini>
 90c:	e8bd4038 	pop	{r3, r4, r5, lr}
 910:	e12fff1e 	bx	lr
 914:	00000a68 	.word	0x00000a68
 918:	00000a6c 	.word	0x00000a6c

0000091c <__cs3_premain>:
 91c:	e92d4008 	push	{r3, lr}
 920:	eb00001d 	bl	99c <__libc_init_array>
 924:	e59f3030 	ldr	r3, [pc, #48]	; 95c <__cs3_premain+0x40>
 928:	e3530000 	cmp	r3, #0
 92c:	15930000 	ldrne	r0, [r3]
 930:	01a00003 	moveq	r0, r3
 934:	e59f3024 	ldr	r3, [pc, #36]	; 960 <__cs3_premain+0x44>
 938:	e3530000 	cmp	r3, #0
 93c:	15931000 	ldrne	r1, [r3]
 940:	01a01003 	moveq	r1, r3
 944:	e3a02000 	mov	r2, #0
 948:	ebfffe43 	bl	25c <main>
 94c:	e59f3010 	ldr	r3, [pc, #16]	; 964 <__cs3_premain+0x48>
 950:	e3530000 	cmp	r3, #0
 954:	1bffff2d 	blne	610 <exit>
 958:	eafffffe 	b	958 <__cs3_premain+0x3c>
	...
 964:	00000610 	.word	0x00000610

00000968 <_exit>:
 968:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 96c:	e3a00018 	mov	r0, #24
 970:	e59f1004 	ldr	r1, [pc, #4]	; 97c <_exit+0x14>
 974:	ef123456 	svc	0x00123456
 978:	eafffffe 	b	978 <_exit+0x10>
 97c:	00020026 	.word	0x00020026

00000980 <__cs3_isr_interrupt>:
 980:	eafffffe 	b	980 <__cs3_isr_interrupt>

00000984 <__cs3_isr_undef>:
 984:	eafffffe 	b	984 <__cs3_isr_undef>

00000988 <__cs3_isr_swi>:
 988:	eafffffe 	b	988 <__cs3_isr_swi>

0000098c <__cs3_isr_pabort>:
 98c:	eafffffe 	b	98c <__cs3_isr_pabort>

00000990 <__cs3_isr_dabort>:
 990:	eafffffe 	b	990 <__cs3_isr_dabort>

00000994 <__cs3_isr_irq>:
 994:	eafffffe 	b	994 <__cs3_isr_irq>

00000998 <__cs3_isr_fiq>:
 998:	eafffffe 	b	998 <__cs3_isr_fiq>

0000099c <__libc_init_array>:
 99c:	e92d4070 	push	{r4, r5, r6, lr}
 9a0:	e59f506c 	ldr	r5, [pc, #108]	; a14 <__libc_init_array+0x78>
 9a4:	e59f606c 	ldr	r6, [pc, #108]	; a18 <__libc_init_array+0x7c>
 9a8:	e0656006 	rsb	r6, r5, r6
 9ac:	e1b06146 	asrs	r6, r6, #2
 9b0:	12455004 	subne	r5, r5, #4
 9b4:	13a04000 	movne	r4, #0
 9b8:	0a000005 	beq	9d4 <__libc_init_array+0x38>
 9bc:	e5b53004 	ldr	r3, [r5, #4]!
 9c0:	e2844001 	add	r4, r4, #1
 9c4:	e1a0e00f 	mov	lr, pc
 9c8:	e12fff13 	bx	r3
 9cc:	e1560004 	cmp	r6, r4
 9d0:	1afffff9 	bne	9bc <__libc_init_array+0x20>
 9d4:	e59f5040 	ldr	r5, [pc, #64]	; a1c <__libc_init_array+0x80>
 9d8:	e59f6040 	ldr	r6, [pc, #64]	; a20 <__libc_init_array+0x84>
 9dc:	e0656006 	rsb	r6, r5, r6
 9e0:	eb000012 	bl	a30 <_init>
 9e4:	e1b06146 	asrs	r6, r6, #2
 9e8:	12455004 	subne	r5, r5, #4
 9ec:	13a04000 	movne	r4, #0
 9f0:	0a000005 	beq	a0c <__libc_init_array+0x70>
 9f4:	e5b53004 	ldr	r3, [r5, #4]!
 9f8:	e2844001 	add	r4, r4, #1
 9fc:	e1a0e00f 	mov	lr, pc
 a00:	e12fff13 	bx	r3
 a04:	e1560004 	cmp	r6, r4
 a08:	1afffff9 	bne	9f4 <__libc_init_array+0x58>
 a0c:	e8bd4070 	pop	{r4, r5, r6, lr}
 a10:	e12fff1e 	bx	lr
 a14:	00000a48 	.word	0x00000a48
 a18:	00000a48 	.word	0x00000a48
 a1c:	00000a48 	.word	0x00000a48
 a20:	00000a50 	.word	0x00000a50

Disassembly of section .rodata:

00000a28 <_global_impure_ptr>:
 a28:	00000a90 00000043                       ....C...

00000a30 <_init>:
 a30:	e1a0c00d 	mov	r12, sp
 a34:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a38:	e24cb004 	sub	r11, r12, #4
 a3c:	e24bd028 	sub	sp, r11, #40	; 0x28
 a40:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a44:	e12fff1e 	bx	lr

00000a48 <__init_array_start>:
 a48:	000008b4 	.word	0x000008b4

00000a4c <__frame_dummy_init_array_entry>:
 a4c:	00000208                                ....

00000a50 <__libc_fini>:
 a50:	e1a0c00d 	mov	r12, sp
 a54:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a58:	e24cb004 	sub	r11, r12, #4
 a5c:	e24bd028 	sub	sp, r11, #40	; 0x28
 a60:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a64:	e12fff1e 	bx	lr

00000a68 <__fini_array_start>:
 a68:	000001c4 	.word	0x000001c4

00000a6c <__cs3_regions>:
 a6c:	00000000 	.word	0x00000000
 a70:	00000040 	.word	0x00000040
 a74:	00000040 	.word	0x00000040
 a78:	00000e80 	.word	0x00000e80
 a7c:	00000020 	.word	0x00000020
